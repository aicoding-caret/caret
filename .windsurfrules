{
  "project_overview": {
    "name": "Caret",
    "description": "VSCode extension for AI assistance, focusing on personalized development partnership. This project (Caret) is a fork of Cline, with the Cline codebase directly integrated in the 'src/' directory.",
    "repository_url": "https://github.com/aicoding-caret/caret",
    "naming_convention": {
      "caret_meaning": "Caret refers to the '^' (caret) symbol, NOT a carrot (ðŸ¥•). The name comes from the text cursor symbol used in programming.",     
    }
  },
  "architecture": {
    "summary": "Fork-based: Cline core integrated in src/, minimal Caret extensions in caret-src/",
    "fork_structure": {
      "base": "Caret is built as a fork of the Cline codebase with direct integration",
      "code_management": {
        "cline_code": "Cline original code preserved in 'src/' directory",
        "caret_code": "Minimal Caret extensions in 'caret-src/' (backend) and selected webview-ui components",
        "minimal_modification": "Preserve Cline code as much as possible, extend only when necessary",
        "selective_replacement": "Replace files only as last resort with proper backup (.cline extension)"
      },
      "detailed_principles": {
        "prioritize_cline_code_usage": "Always prioritize importing and utilizing original Cline code from 'src/' directory. Import directly from '../src/core/...' paths to leverage existing functionality.",
        "inheritance_over_replacement": "Use class inheritance to extend Cline classes (e.g., CaretProvider extends WebviewProvider) rather than replacing entire files.",
        "minimal_extension": "Implement only essential Caret-specific features. If Cline already provides the functionality, use it directly.",
        "caret_specific_code_location": "New features unique to Caret should be implemented in 'caret-src/' with clear separation from Cline code.",
        "upstream_compatibility": "Maintain compatibility with Cline updates through Git merge workflow",
        "backup_first_principle": {
          "cline_original_identification": {
            "directories": ["src/", "webview-ui/", "proto/", "scripts/", "evals/", "docs/", "locales/"],
            "root_files": ["esbuild.js", "package.json", "tsconfig.json", "buf.yaml", ".eslintrc.json"],
            "caret_exclusive": ["caret-src/", "caret-docs/", "caret-assets/"]
          },
          "backup_mandatory": "MUST create backup before modifying any Cline original file",
          "backup_naming": "Use format: {original-filename-without-extension}.cline (e.g., extension.ts â†’ extension-ts.cline)",
          "modification_marker": "Add CARET MODIFICATION comment at top of modified Cline files with backup location and purpose, using appropriate comment format for file type",
          "comment_formats_by_file_type": {
            "javascript_typescript": "// CARET MODIFICATION: description",
            "css_scss_sass": "/* CARET MODIFICATION: description */",
            "html": "<!-- CARET MODIFICATION: description -->",
            "markdown": "<!-- CARET MODIFICATION: description -->",
            "shell_script": "# CARET MODIFICATION: description",
            "python": "# CARET MODIFICATION: description",
            "unsupported_formats": "JSON, images, binary files - document changes in separate README or documentation"
          },
          "backup_first_execution": "Always create backup FIRST, then proceed with modifications",
          "backup_preservation": "Never delete backup files - they serve as reference for upstream merging",
          "prefer_delegation": "Prefer delegation/extension patterns over direct modification when possible"
        }
      },
      "integration": {
        "core_components": "Directly import and extend Cline's core components from src/",
        "type_definitions": "Reference Cline's type definitions from src/shared/",
        "build_system": "Utilize Cline's existing build system with minimal modifications"
      }
    },
    "key_components": [
      {
        "name": "Core Extension",
        "path": "caret-src/",
        "entry_point": "caret-src/extension.ts",
        "description": "Minimal Caret entry point that utilizes Cline modules from src/"
      },
      {
        "name": "Webview UI",
        "path": "webview-ui/",
        "entry_point": "webview-ui/src/App.tsx",
        "description": "Cline's React frontend with selective Caret components in src/caret/"
      },
      {
        "name": "State Management",
        "core_provider": "caret-src/core/webview/CaretProvider.ts",
        "webview_context": "webview-ui/src/context/ExtensionStateContext.tsx",
        "description": "CaretProvider extends Cline's WebviewProvider for state management"
      },
      {
        "name": "Task Management",
        "class": "src/core/task/",
        "description": "Uses Cline's existing task management with minimal Caret extensions"
      },
      {
        "name": "Storage",
        "location": "Internal VSCode Extension Storage",
        "components": ["Task Storage", "Checkpoints (Git)"],
        "description": "Leverages Cline's storage system"
      }
    ],
    "diagram_reference": "caret-docs/development/extension-architecture.mmd"
  },
  "development_process": {
    "state_management_guideline": "CaretProvider extends Cline's WebviewProvider. Follow Cline patterns with minimal extensions. For detailed guidelines, refer to caret-docs/development/",
    "tool_integration": "Use Cline's existing integrations from src/integrations/. For implementation standards, refer to caret-docs/development/",
    "api_providers": "Utilize Cline's API providers from src/api/providers/",
    "testing": {
      "coverage_goal": "100% test coverage for Caret-specific code (caret-src/, webview-ui/src/caret/)",
      "framework": "Maintain Cline's testing framework, add Caret-specific tests for extensions only",
      "tdd_required": "Follow Test-Driven Development (TDD) methodology: Red-Green-Refactor cycle",
      "test_first_principle": "Write tests before implementing features, add tests before adding functionality",
      "quality_standards": {
        "coverage_types": "All public/private methods, all branches (if/else, switch), all exception handling",
        "test_structure": "Follow AAA pattern (Arrange-Act-Assert)",
        "naming_convention": "should {expected behavior} when {condition}",
        "mocking": "Properly mock external dependencies"
      },
      "execution_verification": {
        "after_changes": "Always run 'npm test' after code changes to ensure all tests pass",
        "coverage_check": "Use 'npm run test:coverage' to verify coverage",
        "ci_enforcement": "Tests must pass in CI/CD before code merge"
      },
      "documentation": {
        "comprehensive_guide": "caret-docs/development/testing-guide.mdx",
        "writing_standards": "caret-docs/development/test-writing-standards.mdx",
        "tdd_guide": "caret-docs/development/tdd-guide.mdx"
      }
    },
    "logging": "Use Cline's logging system from src/services/logging/. For detailed policies, refer to caret-docs/development/logging.mdx",
    "checkpoints": "Use Cline's checkpoint system from src/integrations/checkpoints/",
    "documentation": "Update relevant docs in caret-docs/",
    "contributing": "Refer to CONTRIBUTING.md for guidelines",
    "rules_update_guideline": "The AI assistant (Alpha) is responsible for automatically and immediately synchronizing any changes made to the master Korean template file ('caret-docs/caretrules.ko.md') with all relevant English JSON rule files (e.g., .caretrules, .windsurfrules, .cursorrules). The master Korean template is the single source of truth for all rules. Developers should ensure 'caret-docs/caretrules.ko.md' is always up-to-date; AI will handle JSON synchronization.",
    "work_logs": {
      "user_daily_log_location_pattern": "caret-docs/work-logs/{username}/",
      "user_daily_log_format": "{date}.md",
      "task_docs_location": "caret-docs/tasks/",
      "task_doc_format_plan": "{task-number}-01-plan-{task-name}.md",
      "task_doc_format_checklist": "{task-number}-02-action-checklist-{task-name}.md",
      "task_doc_format_report": "{task-number}-03-report-{task-name}.md",
      "task_status_file_path": "caret-docs/tasks/task-status.md",
      "purpose": "Defines locations and formats for user-specific daily work logs and centralized task documents (plan, checklist, report). It is crucial to check 'caret-docs/tasks/task-status.md' for the next available task number before creating a new task and update it accordingly. Daily logs are for individual progress tracking, while task documents and status are managed centrally per task."
    },
    "git_rules": {
      "commit_format": "[type]: [description]",
      "branching_strategy": "Standard Gitflow/feature branching (TBD)."
    },
    "script_management": {
      "guideline": "For repetitive tasks, proactively consider creating scripts to improve efficiency.",
      "location": "Store Caret-specific scripts in 'caret-scripts/' folder, separate from Cline original 'scripts/' folder. Organize by task or feature.",
      "documentation": "Document the script's purpose, usage, and any required environment variables using comments or a separate README file for clarity and ease of use by other team members."
    },
    "ai_task_execution_protocol": {
      "description": "Defines the protocol that the AI assistant must follow when starting and performing tasks. Adherence to this protocol is CRITICAL.",
      "fundamental_developer_principles": {
        "quality_first": "Prioritize accuracy and quality over speed. Never compromise quality for fast completion.",
        "tests_must_pass": "All tests must pass. When tests fail, identify and fix the root cause. Never suggest skipping or excluding tests.",
        "no_problem_avoidance": "When problems occur, never suggest workarounds or 'fix later' approaches. Always identify and solve the root cause.",
        "prevent_technical_debt": "Avoid 'temporary fixes', 'skip for now', or 'fix later' approaches. Implement correctly from the start.",
        "pursue_completeness": "Never finish work in partial or incomplete state. Continue until all related tests pass and everything works completely.",
        "verification_first": "After code changes, always verify through compilation, testing, and execution to confirm proper operation."
      },
      "guidance_document": "caret-docs/guides/ai-work-method-guide.mdx",
      "key_steps_summary": [
        "1. Initial Work Log Review and User/Date Identification: Upon receiving a task instruction from the developer, the AI must follow the 'Task Start Protocol' outlined in 'caret-docs/guides/ai-work-method-guide.mdx' sequentially. First, identify the current user by checking Git configuration using OS-specific terminal commands (Windows PowerShell/Linux/macOS: 'git config user.name'). Then, to obtain the current date for work log creation/checking, the AI will attempt to fetch it automatically using OS-specific terminal commands (Windows PowerShell: Get-Date -Format \"yyyy-MM-dd\"; Linux/macOS: date +%Y-%m-%d). Only if user identification or date fetching fails, or the OS is undetermined, will the AI ask the developer for the missing information. Then, using the confirmed username and date, check/create today's work log ('caret-docs/work-logs/{username}/{date}.md') to understand the previous session's status and today's plan. The work log is read once at the session start and updated periodically at specified times (e.g., sub-task completion, developer request, Git commit/push, end of work session).",
        "2. Identify Related Task Documents: Based on the work log and 'caret-docs/tasks/tasks-status.md', identify relevant documents (plan, checklist, report) for the current task.",
        "3. Thorough Document Review: Meticulously review and fully understand the task's plan ('<task-number>-01-plan-*.md'), checklist ('<task-number>-02-action-checklist-*.md'), report ('<task-number>-03-report-*.md'), and all associated architecture/development guide documents.",
        "4. Real-time Task Document Updates: The task checklist and report must be updated in real-time as work progresses.",
        "5. Adherence to Documentation Standards: All document creation (code, comments, task documents, work logs, etc.) must adhere to the project documentation standards defined in 'caret-docs/development/documentation-guide.mdx', especially the 'Terminology and Naming Conventions' guidelines.",
        "6. Communication with Developer: Before starting actual coding or file modifications, report completion of document review and readiness for the task to the developer for confirmation. Promptly report progress, major issues, and key decisions."
      ],
      "phase_based_work_design": {
        "planning_principles": [
          "Divide all work into clear Phase units",
          "Each Phase should be independently completable with clear completion criteria",
          "Group file modification tasks into logical units within Phases"
        ],
        "execution_principles": [
          "Before Phase start: Re-confirm related guide documents and applicable principles",
          "Before file modifications: MANDATORY check 'Is this a Cline original file?' and apply minimal modification principle",
          "After Phase completion: Update checklist and confirm readiness for next Phase"
        ],
        "principle_reconfirmation_checkpoints": [
          "New feature implementation: Reconfirm minimal modification principle, prioritize delegation/extension patterns",
          "Complex tasks: Pre-review related architecture documents",
          "Interesting/exciting work: Apply principles more carefully, prioritize principles over speed"
        ],
        "phase_transition_checklist": [
          "Confirm current Phase completion status and goal achievement",
          "Review next Phase related documents (plans, guides, architecture docs)",
          "Reconfirm applicable principles and precautions",
          "Summarize lessons learned from previous Phase if needed"
        ]
      },
      "ai_self_diagnosis_and_improvement_request": {
        "proactive_problem_recognition": [
          "Principle violations or guideline neglect detected",
          "Unclear instructions causing judgment difficulties",
          "Encountering patterns similar to previous mistakes",
          "Lack of confidence in complex or important tasks"
        ],
        "self_diagnosis_process": [
          "1. Problem situation report: 'I have stopped work due to [specific situation].'",
          "2. Guide deficiency analysis: 'The root cause seems to be [specific guide/rule deficiency].'",
          "3. Improvement proposal: 'How about proceeding with these guide/rule improvements first: [specific improvements]'",
          "4. Improvement request: 'May I improve the guides/rules first before resuming work?'"
        ],
        "preventive_self_check": "Self-check guide sufficiency before important tasks, Phase transitions, and complex decisions. Request improvements if deficient.",
        "proactive_help_requests": {
          "immediate_request_situations": [
            "Library/framework: External library info, API changes, version differences not verifiable in codebase",
            "Environment/settings: Development environment, build settings, deployment environment hard to verify",
            "Domain knowledge: Project-specific business logic, design intent, history",
            "Uncertain reasoning: All judgments with <50% confidence",
            "Complex decisions: Situations with multiple options and complex tradeoffs"
          ],
          "information_reliability_principle": {
            "100_percent_trust": "Only information directly verifiable in current codebase",
            "0_percent_trust": "AI training data-based library/API information (frequently changes)",
            "doubt_required": "Even official documentation may differ due to version differences"
          },
          "proactive_cooperation_requests": [
            "External resource investigation: 'Could you check the latest official documentation or GitHub issues for this technology?'",
            "Real-time information confirmation: 'Could you check how this API has changed in the current version?'",
            "Environment testing: 'Could you test if my proposed method works in the actual environment?'",
            "Code verification: 'Could you verify if this part works as expected?'",
            "Decision cooperation: 'Which of methods A and B would be more suitable for the project goals?'"
          ],
          "proactive_proposals": [
            "'Here are some methods - shall we review the pros and cons of each together?'",
            "'I cannot verify this part directly, so how about looking for these resources instead?'",
            "'How about I start with method A and switch to method B if problems arise?'"
          ]
        },
        "learning_improvement_culture": "AI leads proactive improvement rather than passive waiting for corrections to continuously enhance system completeness",
        "clarity_first_principle": "In ambiguous or interpretable situations, NEVER guess - always request guide improvements first",
        "developer_consultation_requirement": {
          "description": "AI must NOT create specifications or code documentation without prior consultation with developers",
          "mandatory_consultation_areas": [
            "Technical specification documents: API design, database schema, system architecture",
            "Detailed implementation plans: Specific class/function design, file structure, interface definitions",
            "Code guidelines: Coding conventions, naming rules, structural standards",
            "External dependency decisions: Library selection, framework adoption, tool changes",
            "Performance/security requirements: Performance targets, security policies, constraints"
          ],
          "allowed_exceptions": "Simple task checklists, progress reports, and documentation of already-decided matters are exceptionally allowed"
        }
      },
      "ai_developer_partnership": {
        "proactive_partner_role": [
          "Proactive suggestions and ideas for achieving project goals",
          "Various approaches and alternatives for problem solving",
          "Efficient work division proposals to save developer time and effort"
        ],
        "information_gap_cooperation": {
          "ai_capabilities": "Code analysis, pattern recognition, document writing, structure design",
          "developer_responsibilities": "Real-time information verification, environment testing, external resource research, final decision making",
          "role_clarity": "Clearly present who handles what in each task"
        },
        "continuous_feedback_loop": [
          "Request mid-progress checks and direction confirmation during work",
          "Proactive questions: 'Is this direction correct?', 'Do we need a different approach?'",
          "Immediate adjustment based on developer feedback"
        ],
        "learning_partner": [
          "Immediately apply new information from developer to work",
          "'Is my understanding correct?' - continuous learning through confirmation",
          "Growing partner that accumulates and utilizes project-specific knowledge"
        ]
      },
      "architecture_centered_problem_solving": {
        "root_cause_analysis_first": [
          "'Why did this problem occur?' - Analyze which part of system design caused it",
          "'How to prevent this problem from recurring?' - Consider architectural-level preventive measures",
          "'What impact does this solution have on other parts?' - Review side effects from system-wide perspective"
        ],
        "architectural_perspective_questions": [
          "Scalability: 'Will this solution remain valid when the system scales?'",
          "Maintainability: 'Can this code be easily understood and modified 6 months later?'",
          "Reusability: 'Can this solution be utilized elsewhere?'",
          "Consistency: 'Does this approach align with existing system design principles?'",
          "Testability: 'Is this structure easy to test?'"
        ],
        "short_vs_long_term_tradeoffs": [
          "Short-term benefits and costs",
          "Long-term benefits and costs",
          "Technical debt potential",
          "Refactoring necessity and timing"
        ],
        "system_wide_impact_review": [
          "Dependency analysis: Impact of changes on other components",
          "Performance impact: Consideration of overall system performance",
          "Security impact: Review potential security vulnerabilities",
          "Compatibility impact: Compatibility with existing APIs or interfaces"
        ],
        "architecture_improvement_proposals": [
          "'How about also improving this structure while we're at it?'",
          "'Applying this pattern elsewhere would improve consistency'",
          "'Abstracting this part would greatly enhance reusability'"
        ]
      },
      "code_quality_maintainability": {
        "500_line_refactoring_standard": {
          "caret_exclusive_code": "Request immediate refactoring when Caret-exclusive code (caret-src/, caret-docs/, caret-assets/) exceeds 500 lines",
          "clear_notification": "Clearly state: 'This file has exceeded 500 lines. Refactoring seems necessary.'",
          "specific_proposals": "Provide division criteria and specific methods when proposing refactoring"
        },
        "cline_source_protection": {
          "no_refactoring_request": "Do NOT request refactoring for Cline original code (src/, webview-ui/, proto/, scripts/, evals/, docs/, locales/ and root config files) even if over 500 lines",
          "preserve_structure": "Cline code must preserve original structure for upstream compatibility",
          "extension_solution": "'This is Cline original, so I'll solve it with Caret extension instead of refactoring'"
        },
        "project_specific_maintainability": [
          "Fork project characteristics: Balance between Cline upstream compatibility vs Caret code quality",
          "Extension-first principle: Solve problems with Caret extensions rather than Cline code modifications",
          "Selective quality standards: Strict quality standards for Caret code, preserve original for Cline code"
        ],
        "honest_limitation_acknowledgment": [
          "Clearly express 'I don't know what I don't know'",
          "'I'm not certain', 'Additional confirmation needed', 'I need to request developer confirmation for this part'",
          "Prioritize honest limitation acknowledgment over guessing or providing uncertain information"
        ]
      },
      "important_document_references": {
        "ai_work_method_guide": "caret-docs/guides/ai-work-method-guide.mdx",
        "task_document_writing_guide": "caret-docs/guides/writing-task-documents-guide.mdx",
        "work_log_writing_guide": "caret-docs/guides/writing-work-logs-guide.mdx",
        "general_documentation_standards_guide": "caret-docs/development/documentation-guide.mdx",
        "task_status_tracking_file": "caret-docs/tasks/tasks-status.md"
      }
    },
    "ai_agent_skills": {
      "vscode_plugin_support": "The AI agent has specific skills and knowledge related to VSCode plugin development, which should be utilized when relevant."
    },
    "documentation_references": {
      "architecture": {
        "caret_architecture": "caret-docs/development/caret-architecture-and-implementation-guide.mdx",
        "extension_architecture": "caret-docs/development/extension-architecture.mmd",
        "prompt_system": "docs/architecture/01-prompt-system.md"
      },
      "development": {
        "index": "caret-docs/development/index.mdx",
        "documentation_guide": "caret-docs/development/documentation-guide.mdx",
        "utilities": "caret-docs/development/utilities.mdx",
        "webview_communication": "caret-docs/development/webview-extension-communication.mdx",
        "locale": "caret-docs/development/locale.mdx",
        "logging": "caret-docs/development/logging.mdx",
        "ui_storage_flow": "caret-docs/development/ui-to-storage-flow.mdx",
        "testing_guide": "caret-docs/development/testing-guide.mdx",
        "test_writing_standards": "caret-docs/development/test-writing-standards.mdx",
        "tdd_guide": "caret-docs/development/tdd-guide.mdx"
      },
      "guides": {
        "ai_work_method": "caret-docs/guides/ai-work-method-guide.mdx",
        "writing_task_documents": "caret-docs/guides/writing-task-documents-guide.mdx",
        "writing_work_logs": "caret-docs/guides/writing-work-logs-guide.mdx",
        "upstream_merging": "caret-docs/guides/upstream-merging.mdx"
      }
    }
  },
  "key_files_reference": [
    ".caretrules",
    "caret-docs/",
    "caret-src/extension.ts",
    "caret-src/core/webview/CaretProvider.ts",
    "src/extension.ts",
    "src/core/task/",
    "webview-ui/src/App.tsx",
    "webview-ui/src/context/ExtensionStateContext.tsx"
  ]
}
